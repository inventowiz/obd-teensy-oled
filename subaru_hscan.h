/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.21.0 Tue Dec 17 19:20:22 2019.
 */

#ifndef SUBARU_HSCAN_H
#define SUBARU_HSCAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SUBARU_HSCAN_BODY_STAT_2_FRAME_ID (0x600u)
#define SUBARU_HSCAN_BODY_STAT_1_FRAME_ID (0x514u)
#define SUBARU_HSCAN_WHEEL_SPEED_FRAME_ID (0x513u)
#define SUBARU_HSCAN_SPEED_FRAME_ID (0x512u)
#define SUBARU_HSCAN_DRIVER_INPUT_FRAME_ID (0x511u)
#define SUBARU_HSCAN_ECU_STATUS_2_FRAME_ID (0x411u)
#define SUBARU_HSCAN_ECU_STATUS_1_FRAME_ID (0x410u)
#define SUBARU_HSCAN_STEERING_SENSOR_STATUS_FRAME_ID (0x02u)

/* Frame lengths in bytes. */
#define SUBARU_HSCAN_BODY_STAT_2_LENGTH (8u)
#define SUBARU_HSCAN_BODY_STAT_1_LENGTH (8u)
#define SUBARU_HSCAN_WHEEL_SPEED_LENGTH (8u)
#define SUBARU_HSCAN_SPEED_LENGTH (8u)
#define SUBARU_HSCAN_DRIVER_INPUT_LENGTH (8u)
#define SUBARU_HSCAN_ECU_STATUS_2_LENGTH (8u)
#define SUBARU_HSCAN_ECU_STATUS_1_LENGTH (8u)
#define SUBARU_HSCAN_STEERING_SENSOR_STATUS_LENGTH (8u)

/* Extended or standard frame types. */
#define SUBARU_HSCAN_BODY_STAT_2_IS_EXTENDED (0)
#define SUBARU_HSCAN_BODY_STAT_1_IS_EXTENDED (0)
#define SUBARU_HSCAN_WHEEL_SPEED_IS_EXTENDED (0)
#define SUBARU_HSCAN_SPEED_IS_EXTENDED (0)
#define SUBARU_HSCAN_DRIVER_INPUT_IS_EXTENDED (0)
#define SUBARU_HSCAN_ECU_STATUS_2_IS_EXTENDED (0)
#define SUBARU_HSCAN_ECU_STATUS_1_IS_EXTENDED (0)
#define SUBARU_HSCAN_STEERING_SENSOR_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message Body_Stat_2.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_body_stat_2_t {
    /**
     * Range: 0..65535 (0..65535 mm^3/sec)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fuel_consumption;

    /**
     * Range: 0..255 (-40..215 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temp_coolant;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clutch_sw;
};

/**
 * Signals in message Body_Stat_1.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_body_stat_1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reverse_sw;

    /**
     * Range: 0..255 (-40..87.5 degC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t temp_out;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drl_sw;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t headlight_sw;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bright_sw;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wiper_sw;

    /**
     * Range: 0..65535 (0..6553.5 Ohms)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fuel_res;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t handbrake_sw;
};

/**
 * Signals in message Wheel_Speed.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_wheel_speed_t {
    /**
     * Range: 0..65535 (0..3686.34375 kph)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wss_fl;

    /**
     * Range: 0..65535 (0..3686.34375 kph)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wss_fr;

    /**
     * Range: 0..65535 (0..3686.34375 kph)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wss_rl;

    /**
     * Range: 0..65535 (0..3686.34375 kph)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wss_rr;
};

/**
 * Signals in message Speed.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_speed_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_sw;

    /**
     * Range: 0..65535 (0..3686.34375 kph)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t veh_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_sw;
};

/**
 * Signals in message Driver_Input.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_driver_input_t {
    /**
     * Range: -32768..32767 (-32768..32767 deg)
     * Scale: 1
     * Offset: 0
     */
    int16_t steering_angle;

    /**
     * Range: 0..255.0000000000000255000000000 (0..100 %)
     * Scale: 0.392156862745098
     * Offset: 0
     */
    uint8_t brake_pos;
};

/**
 * Signals in message ECU_Status_2.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_ecu_status_2_t {
    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear;

    /**
     * Range: 0..255 (0..255 kph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_sw_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_cruise;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_set;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mil_sw;
};

/**
 * Signals in message ECU_Status_1.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_ecu_status_1_t {
    /**
     * Range: -128..127 (-204.8..203.2 Nm)
     * Scale: 1.6
     * Offset: 0
     */
    int8_t trans_tq;

    /**
     * Range: -128..127 (-204.8..203.2 Nm)
     * Scale: 1.6
     * Offset: 0
     */
    int8_t eng_tq;

    /**
     * Range: 0..255 (0..408 Nm)
     * Scale: 1.6
     * Offset: 0
     */
    uint8_t loss_tq;

    /**
     * Range: 0..255.0000000000000255000000000 (0..100 %)
     * Scale: 0.392156862745098
     * Offset: 0
     */
    uint8_t accel_pos;

    /**
     * Range: 0..65535 (0..65535 RPM)
     * Scale: 1
     * Offset: 0
     */
    uint16_t engine_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t compressor_sw;
};

/**
 * Signals in message Steering_Sensor_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct subaru_hscan_steering_sensor_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Pack message Body_Stat_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_body_stat_2_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_body_stat_2_t *src_p,
    size_t size);

/**
 * Unpack message Body_Stat_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_body_stat_2_unpack(
    struct subaru_hscan_body_stat_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_body_stat_2_fuel_consumption_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_2_fuel_consumption_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_2_fuel_consumption_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_2_temp_coolant_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_2_temp_coolant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_2_temp_coolant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_2_clutch_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_2_clutch_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_2_clutch_sw_is_in_range(uint8_t value);

/**
 * Pack message Body_Stat_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_body_stat_1_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_body_stat_1_t *src_p,
    size_t size);

/**
 * Unpack message Body_Stat_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_body_stat_1_unpack(
    struct subaru_hscan_body_stat_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_reverse_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_reverse_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_reverse_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_temp_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_temp_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_temp_out_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_drl_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_drl_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_drl_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_headlight_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_headlight_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_headlight_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_bright_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_bright_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_bright_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_wiper_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_wiper_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_wiper_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_body_stat_1_fuel_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_fuel_res_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_fuel_res_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_body_stat_1_handbrake_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_body_stat_1_handbrake_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_body_stat_1_handbrake_sw_is_in_range(uint8_t value);

/**
 * Pack message Wheel_Speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_wheel_speed_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_wheel_speed_t *src_p,
    size_t size);

/**
 * Unpack message Wheel_Speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_wheel_speed_unpack(
    struct subaru_hscan_wheel_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_wheel_speed_wss_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_wheel_speed_wss_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_wheel_speed_wss_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_wheel_speed_wss_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_wheel_speed_wss_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_wheel_speed_wss_fr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_wheel_speed_wss_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_wheel_speed_wss_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_wheel_speed_wss_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_wheel_speed_wss_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_wheel_speed_wss_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_wheel_speed_wss_rr_is_in_range(uint16_t value);

/**
 * Pack message Speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_speed_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_speed_t *src_p,
    size_t size);

/**
 * Unpack message Speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_speed_unpack(
    struct subaru_hscan_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_speed_esp_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_speed_esp_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_speed_esp_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_speed_veh_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_speed_veh_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_speed_veh_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_speed_brake_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_speed_brake_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_speed_brake_sw_is_in_range(uint8_t value);

/**
 * Pack message Driver_Input.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_driver_input_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_driver_input_t *src_p,
    size_t size);

/**
 * Unpack message Driver_Input.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_driver_input_unpack(
    struct subaru_hscan_driver_input_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t subaru_hscan_driver_input_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_driver_input_steering_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_driver_input_steering_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_driver_input_brake_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_driver_input_brake_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_driver_input_brake_pos_is_in_range(uint8_t value);

/**
 * Pack message ECU_Status_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_ecu_status_2_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_ecu_status_2_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_ecu_status_2_unpack(
    struct subaru_hscan_ecu_status_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_2_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_2_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_2_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_2_cruise_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_2_cruise_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_2_cruise_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_2_brake_sw_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_2_brake_sw_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_2_brake_sw_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_2_cruise_cruise_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_2_cruise_cruise_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_2_cruise_cruise_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_2_cruise_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_2_cruise_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_2_cruise_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_2_mil_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_2_mil_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_2_mil_sw_is_in_range(uint8_t value);

/**
 * Pack message ECU_Status_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_ecu_status_1_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_ecu_status_1_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_ecu_status_1_unpack(
    struct subaru_hscan_ecu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t subaru_hscan_ecu_status_1_trans_tq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_1_trans_tq_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_1_trans_tq_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t subaru_hscan_ecu_status_1_eng_tq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_1_eng_tq_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_1_eng_tq_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_1_loss_tq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_1_loss_tq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_1_loss_tq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_1_accel_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_1_accel_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_1_accel_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t subaru_hscan_ecu_status_1_engine_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_1_engine_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_1_engine_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t subaru_hscan_ecu_status_1_compressor_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double subaru_hscan_ecu_status_1_compressor_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool subaru_hscan_ecu_status_1_compressor_sw_is_in_range(uint8_t value);

/**
 * Pack message Steering_Sensor_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int subaru_hscan_steering_sensor_status_pack(
    uint8_t *dst_p,
    const struct subaru_hscan_steering_sensor_status_t *src_p,
    size_t size);

/**
 * Unpack message Steering_Sensor_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int subaru_hscan_steering_sensor_status_unpack(
    struct subaru_hscan_steering_sensor_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);


#ifdef __cplusplus
}
#endif

#endif
